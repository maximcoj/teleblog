const { Telegraf } = require('telegraf');
const express = require('express');
const cors = require('cors');
const fs = require('fs');
const path = require('path');
const https = require('https');
require('dotenv').config();

const app = express();
const bot = new Telegraf(process.env.BOT_TOKEN);

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static('public'));
app.use('/uploads', express.static('uploads'));

// –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
const blogs = new Map();
const posts = new Map();
const userStates = new Map();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async function downloadImage(fileId, fileName) {
  try {
    const file = await bot.telegram.getFile(fileId);
    const filePath = file.file_path;
    const url = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${filePath}`;
    
    const uploadDir = path.join(__dirname, 'uploads');
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
    }
    
    const localPath = path.join(uploadDir, fileName);
    
    return new Promise((resolve, reject) => {
      const fileStream = fs.createWriteStream(localPath);
      https.get(url, (response) => {
        response.pipe(fileStream);
        fileStream.on('finish', () => {
          fileStream.close();
          resolve(`/uploads/${fileName}`);
        });
      }).on('error', (err) => {
        fs.unlink(localPath, () => {}); // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
        reject(err);
      });
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    throw error;
  }
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start((ctx) => {
  const welcomeMessage = `
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TeleBlog!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–ª–æ–≥ –ø—Ä—è–º–æ –∏–∑ Telegram.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/create - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±–ª–æ–≥
/posts - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏
/help - –ü–æ–º–æ—â—å

–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—à–µ–≥–æ –±–ª–æ–≥–∞!
  `;
  
  ctx.reply(welcomeMessage);
});

// –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–≥–∞
bot.command('create', async (ctx) => {
  const userId = ctx.from.id;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –±–ª–æ–≥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const existingBlog = Array.from(blogs.values()).find(blog => blog.userId === userId);
  
  if (existingBlog) {
    ctx.reply('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –±–ª–æ–≥! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /posts –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏.');
    return;
  }
  
  userStates.set(userId, { state: 'waiting_for_blog_name' });
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –±–ª–æ–≥–∞:');
});

// –ö–æ–º–∞–Ω–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏
bot.command('posts', async (ctx) => {
  const userId = ctx.from.id;
  const blog = Array.from(blogs.values()).find(blog => blog.userId === userId);
  
  if (!blog) {
    ctx.reply('–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –±–ª–æ–≥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–≥–∞.');
    return;
  }
  
  const userPosts = Array.from(posts.values()).filter(post => post.blogId === blog.id);
  
  if (userPosts.length === 0) {
    ctx.reply('–í –≤–∞—à–µ–º –±–ª–æ–≥–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç!');
    userStates.set(userId, { state: 'creating_post', blogId: blog.id });
    return;
  }
  
  let message = 'üìù –í–∞—à–∏ –ø–æ—Å—Ç—ã:\n\n';
  userPosts.forEach((post, index) => {
    const date = new Date(post.createdAt).toLocaleDateString('ru-RU');
    message += `${index + 1}. ${post.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'} (${date})\n`;
  });
  
  message += '\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n';
  message += '/newpost - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç\n';
  message += '/edit <–Ω–æ–º–µ—Ä> - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç\n';
  message += '/delete <–Ω–æ–º–µ—Ä> - –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç';
  
  ctx.reply(message);
  userStates.set(userId, { state: 'managing_posts', blogId: blog.id, posts: userPosts });
});

// –ö–æ–º–∞–Ω–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞
bot.command('edit', async (ctx) => {
  const userId = ctx.from.id;
  const args = ctx.message.text.split(' ');
  
  if (args.length < 2) {
    ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /edit <–Ω–æ–º–µ—Ä_–ø–æ—Å—Ç–∞>');
    return;
  }
  
  const postNumber = parseInt(args[1]) - 1;
  const userState = userStates.get(userId);
  
  if (!userState || !userState.posts || !userState.posts[postNumber]) {
    ctx.reply('–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /posts –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤.');
    return;
  }
  
  const post = userState.posts[postNumber];
  userStates.set(userId, { 
    state: 'editing_post', 
    blogId: userState.blogId, 
    postId: post.id 
  });
  
  ctx.reply(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ "${post.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}". –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:`);
});

// –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞
bot.command('delete', async (ctx) => {
  const userId = ctx.from.id;
  const args = ctx.message.text.split(' ');
  
  if (args.length < 2) {
    ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete <–Ω–æ–º–µ—Ä_–ø–æ—Å—Ç–∞>');
    return;
  }
  
  const postNumber = parseInt(args[1]) - 1;
  const userState = userStates.get(userId);
  
  if (!userState || !userState.posts || !userState.posts[postNumber]) {
    ctx.reply('–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /posts –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤.');
    return;
  }
  
  const post = userState.posts[postNumber];
  
  try {
    posts.delete(post.id);
    ctx.reply('–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤
    const updatedPosts = Array.from(posts.values()).filter(p => p.blogId === userState.blogId);
    userStates.set(userId, { 
      state: 'managing_posts', 
      blogId: userState.blogId, 
      posts: updatedPosts 
    });
  } catch (error) {
    ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
bot.command('help', (ctx) => {
  const helpMessage = `
üìö –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

/create - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±–ª–æ–≥
/posts - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏
/edit <–Ω–æ–º–µ—Ä> - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç
/delete <–Ω–æ–º–µ—Ä> - –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç
/newpost - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç!
üì∏ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å—è–º–∏
  `;
  
  ctx.reply(helpMessage);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞
bot.command('newpost', async (ctx) => {
  const userId = ctx.from.id;
  const blog = Array.from(blogs.values()).find(blog => blog.userId === userId);
  
  if (!blog) {
    ctx.reply('–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –±–ª–æ–≥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–≥–∞.');
    return;
  }
  
  userStates.set(userId, { state: 'creating_post', blogId: blog.id });
  ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞:');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—è–º–∏
bot.on('photo', async (ctx) => {
  const userId = ctx.from.id;
  const userState = userStates.get(userId);
  const caption = ctx.message.caption || '';
  
  if (!userState) {
    ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–≥–∞ –∏–ª–∏ /posts –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏.');
    return;
  }
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
    const photo = ctx.message.photo[ctx.message.photo.length - 1];
    const fileName = `photo_${Date.now()}_${photo.file_id}.jpg`;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const imagePath = await downloadImage(photo.file_id, fileName);
    
    switch (userState.state) {
      case 'creating_post':
        const blog = blogs.get(userState.blogId);
        if (!blog) {
          ctx.reply('–ë–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –±–ª–æ–≥–∞.');
          userStates.delete(userId);
          return;
        }
        
        const postId = Date.now().toString();
        const post = {
          id: postId,
          blogId: userState.blogId,
          content: caption || '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
          title: caption.length > 50 ? caption.substring(0, 50) + '...' : (caption || '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'),
          image: imagePath,
          createdAt: new Date(),
          viewCount: 0,
          likes: 0
        };
        
        posts.set(postId, post);
        ctx.reply('‚úÖ –ü–æ—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –≤–∞—à–µ–º –±–ª–æ–≥–µ!');
        break;
        
      case 'managing_posts':
        const blog2 = blogs.get(userState.blogId);
        if (!blog2) {
          ctx.reply('–ë–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –±–ª–æ–≥–∞.');
          userStates.delete(userId);
          return;
        }
        
        const postId2 = Date.now().toString();
        const post2 = {
          id: postId2,
          blogId: userState.blogId,
          content: caption || '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
          title: caption.length > 50 ? caption.substring(0, 50) + '...' : (caption || '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'),
          image: imagePath,
          createdAt: new Date(),
          viewCount: 0,
          likes: 0
        };
        
        posts.set(postId2, post2);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤
        const updatedPosts = Array.from(posts.values()).filter(p => p.blogId === userState.blogId);
        userStates.set(userId, { 
          state: 'managing_posts', 
          blogId: userState.blogId, 
          posts: updatedPosts 
        });
        
        ctx.reply('‚úÖ –ü–æ—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –≤–∞—à–µ–º –±–ª–æ–≥–µ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç.');
        break;
        
      default:
        ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ /posts –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏ –∏–ª–∏ /newpost –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞.');
        break;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  const userId = ctx.from.id;
  const userState = userStates.get(userId);
  const messageText = ctx.message.text;
  
  if (!userState) {
    ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–≥–∞ –∏–ª–∏ /posts –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏.');
    return;
  }
  
  switch (userState.state) {
    case 'waiting_for_blog_name':
      try {
        const blogName = messageText.trim();
        const subdomain = blogName.toLowerCase().replace(/[^a-z0-9]/g, '');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–¥–æ–º–µ–Ω–∞
        const existingBlog = Array.from(blogs.values()).find(blog => blog.subdomain === subdomain);
        if (existingBlog) {
          ctx.reply('–ë–ª–æ–≥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:');
          return;
        }
        
        const blogId = Date.now().toString();
        const blog = {
          id: blogId,
          userId,
          name: blogName,
          subdomain,
          url: `http://localhost:3000/${subdomain}`,
          createdAt: new Date()
        };
        
        blogs.set(blogId, blog);
        userStates.delete(userId);
        
        ctx.reply(`üéâ –ë–ª–æ–≥ "${blogName}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n–í–∞—à –±–ª–æ–≥ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ${blog.url}\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ—Å—Ç—ã!`);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤
        userStates.set(userId, { state: 'creating_post', blogId: blog.id });
      } catch (error) {
        ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–ª–æ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
      break;
      
    case 'creating_post':
      try {
        const blog = blogs.get(userState.blogId);
        if (!blog) {
          ctx.reply('–ë–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –±–ª–æ–≥–∞.');
          userStates.delete(userId);
          return;
        }
        
        const postId = Date.now().toString();
        const post = {
          id: postId,
          blogId: userState.blogId,
          content: messageText,
          title: messageText.length > 50 ? messageText.substring(0, 50) + '...' : messageText,
          createdAt: new Date(),
          viewCount: 0,
          likes: 0
        };
        
        posts.set(postId, post);
        ctx.reply('‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –≤–∞—à–µ–º –±–ª–æ–≥–µ!');
      } catch (error) {
        ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
      break;
      
    case 'editing_post':
      try {
        const post = posts.get(userState.postId);
        if (post) {
          post.content = messageText;
          post.title = messageText.length > 50 ? messageText.substring(0, 50) + '...' : messageText;
          post.updatedAt = new Date();
          posts.set(userState.postId, post);
        }
        
        const updatedPosts = Array.from(posts.values()).filter(p => p.blogId === userState.blogId);
        userStates.set(userId, { 
          state: 'managing_posts', 
          blogId: userState.blogId,
          posts: updatedPosts
        });
        
        ctx.reply('‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤.');
      } catch (error) {
        ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
      break;
      
    case 'managing_posts':
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç
      try {
        const blog = blogs.get(userState.blogId);
        if (!blog) {
          ctx.reply('–ë–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –±–ª–æ–≥–∞.');
          userStates.delete(userId);
          return;
        }
        
        const postId = Date.now().toString();
        const post = {
          id: postId,
          blogId: userState.blogId,
          content: messageText,
          title: messageText.length > 50 ? messageText.substring(0, 50) + '...' : messageText,
          createdAt: new Date(),
          viewCount: 0,
          likes: 0
        };
        
        posts.set(postId, post);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤
        const updatedPosts = Array.from(posts.values()).filter(p => p.blogId === userState.blogId);
        userStates.set(userId, { 
          state: 'managing_posts', 
          blogId: userState.blogId, 
          posts: updatedPosts 
        });
        
        ctx.reply('‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –≤–∞—à–µ–º –±–ª–æ–≥–µ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç.');
      } catch (error) {
        ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
      break;
  }
});

// API –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
app.get('/api/blogs/:subdomain', async (req, res) => {
  try {
    const blog = Array.from(blogs.values()).find(b => b.subdomain === req.params.subdomain);
    if (!blog) {
      return res.status(404).json({ error: '–ë–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    const blogPosts = Array.from(posts.values()).filter(p => p.blogId === blog.id);
    res.json({ blog, posts: blogPosts });
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–ª–æ–≥–∞
app.get('/:subdomain', async (req, res) => {
  try {
    const blog = Array.from(blogs.values()).find(b => b.subdomain === req.params.subdomain);
    if (!blog) {
      return res.status(404).send(`
        <!DOCTYPE html>
        <html lang="ru">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>–ë–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω</title>
          <link rel="stylesheet" href="/css/style.css">
        </head>
        <body>
          <div class="container">
            <div class="empty-state">
              <div class="empty-state-icon">üîç</div>
              <div class="empty-state-title">–ë–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω</div>
              <div class="empty-state-text">–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π –±–ª–æ–≥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.</div>
            </div>
          </div>
        </body>
        </html>
      `);
    }
    
    const blogPosts = Array.from(posts.values()).filter(p => p.blogId === blog.id);
    
    res.send(`
      <!DOCTYPE html>
      <html lang="ru">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${blog.name}</title>
        <meta name="description" content="–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–ª–æ–≥">
        <link rel="stylesheet" href="/css/style.css">
        <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>üìù</text></svg>">
      </head>
      <body>
        <div class="container">
          
          <div class="blog-header">
            <h1 class="blog-title">${blog.name}</h1>
          </div>
          
          <div class="posts">
            ${blogPosts.length === 0 ? `
              <div class="empty-state">
                <div class="empty-state-icon">üìù</div>
                <div class="empty-state-title">–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤</div>
                <div class="empty-state-text">
                  –ê–≤—Ç–æ—Ä –±–ª–æ–≥–∞ –µ—â–µ –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.<br>
                  –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!
                </div>
              </div>
            ` : blogPosts.map(post => `
              <article class="post">
                <h2 class="post-title">${post.title}</h2>
                ${post.image ? `<div class="post-image"><img src="${post.image}" alt="${post.title}" loading="lazy"></div>` : ''}
                <div class="post-content">${post.content.replace(/\n/g, '<br>')}</div>
                <div class="post-meta">
                  <div class="post-date">
                    ${new Date(post.createdAt).toLocaleDateString('ru-RU', {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric'
                    })}
                  </div>
                  <div class="post-stats">
                    <span class="post-stat views">${post.viewCount || 0}</span>
                    <span class="post-stat likes">${post.likes || 0}</span>
                  </div>
                </div>
              </article>
            `).join('')}
          </div>
        </div>
      </body>
      </html>
    `);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –±–ª–æ–≥–∞:', error);
    res.status(500).send(`
      <!DOCTYPE html>
      <html lang="ru">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞</title>
        <link rel="stylesheet" href="/css/style.css">
      </head>
      <body>
        <div class="container">
          <div class="empty-state">
            <div class="empty-state-icon">‚ö†Ô∏è</div>
            <div class="empty-state-title">–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞</div>
            <div class="empty-state-text">–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–ª–æ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</div>
          </div>
        </div>
      </body>
      </html>
    `);
  }
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="ru">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>TeleBlog - –°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ Telegram</title>
      <link rel="stylesheet" href="/css/style.css">
    </head>
    <body>
      <div class="container">
        <div class="blog-header">
          <h1 class="blog-title">TeleBlog</h1>
          <p class="blog-subtitle">–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –±–ª–æ–≥–∏ –ø—Ä—è–º–æ –∏–∑ Telegram</p>
        </div>
        
        <div class="empty-state">
          <div class="empty-state-icon">üì±</div>
          <div class="empty-state-title">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TeleBlog!</div>
          <div class="empty-state-text">
            –≠—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –±–ª–æ–≥–æ–≤ —á–µ—Ä–µ–∑ Telegram.<br>
            –ù–∞–π–¥–∏—Ç–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ Telegram –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–π –±–ª–æ–≥!
          </div>
        </div>
      </div>
    </body>
    </html>
  `);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;

bot.launch().then(() => {
  console.log('ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω');
});

app.listen(PORT, () => {
  console.log(`üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üì± –ù–∞–π–¥–∏—Ç–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start`);
  console.log(`üåê –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: http://localhost:${PORT}`);
});

// Graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM')); 