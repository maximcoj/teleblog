const { Telegraf } = require('telegraf');
const express = require('express');
const cors = require('cors');
const mongoose = require('mongoose');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

const app = express();
const bot = new Telegraf(process.env.BOT_TOKEN);

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static('public'));
app.use('/assets', express.static(path.join(__dirname, 'assets')));

// –§–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
const DATA_DIR = path.join(__dirname, 'data');
const BLOGS_FILE = path.join(DATA_DIR, 'blogs.json');
const POSTS_FILE = path.join(DATA_DIR, 'posts.json');

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if (!fs.existsSync(DATA_DIR)) {
  fs.mkdirSync(DATA_DIR, { recursive: true });
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
function loadData(filePath) {
  try {
    if (fs.existsSync(filePath)) {
      const data = fs.readFileSync(filePath, 'utf8');
      return JSON.parse(data);
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ ${filePath}:`, error);
  }
  return [];
}

function saveData(filePath, data) {
  try {
    fs.writeFileSync(filePath, JSON.stringify(data, null, 2), 'utf8');
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ ${filePath}:`, error);
  }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
let blogs = loadData(BLOGS_FILE);
let posts = loadData(POSTS_FILE);

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID
function generateId() {
  return Date.now().toString(36) + Math.random().toString(36).substr(2);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Telegram
async function getImageUrl(fileId) {
  try {
    const file = await bot.telegram.getFile(fileId);
    return `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${file.file_path}`;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    return null;
  }
}

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
let useMongoDB = false;
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/teleblog', {
  useNewUrlParser: true,
  useUnifiedTopology: true
}).then(() => {
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  useMongoDB = true;
}).catch((error) => {
  console.log('‚ö†Ô∏è MongoDB –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
  console.log('–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ MongoDB: brew install mongodb-community');
});

// –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ MongoDB –¥–æ—Å—Ç—É–ø–Ω–∞)
let Blog, Post;
if (useMongoDB) {
  Blog = require('./models/Blog');
  Post = require('./models/Post');
}

// –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.start((ctx) => {
  const welcomeMessage = `
üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TeleBlog!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–ª–æ–≥ –ø—Ä—è–º–æ –∏–∑ Telegram.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/create - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±–ª–æ–≥
/posts - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏
/help - –ü–æ–º–æ—â—å

–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—à–µ–≥–æ –±–ª–æ–≥–∞!
  `;
  
  ctx.reply(welcomeMessage);
});

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.telegram.setMyCommands([
  { command: 'start', description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' },
  { command: 'create', description: '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±–ª–æ–≥' },
  { command: 'posts', description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏' },
  { command: 'edit', description: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç' },
  { command: 'delete', description: '–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç' },
  { command: 'deleteblog', description: '–£–¥–∞–ª–∏—Ç—å –±–ª–æ–≥' },
  { command: 'help', description: '–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º' }
]);

// –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–≥–∞
bot.command('create', async (ctx) => {
  const userId = ctx.from.id;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –±–ª–æ–≥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  let existingBlog;
  if (useMongoDB) {
    existingBlog = await Blog.findOne({ userId });
  } else {
    existingBlog = blogs.find(blog => blog.userId === userId);
  }
  
  if (existingBlog) {
    ctx.reply('–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –±–ª–æ–≥! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /posts –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏.');
    return;
  }
  
  userStates.set(userId, { state: 'waiting_for_blog_name' });
  ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –±–ª–æ–≥–∞:');
});

// –ö–æ–º–∞–Ω–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏
bot.command('posts', async (ctx) => {
  const userId = ctx.from.id;
  
  let blog;
  if (useMongoDB) {
    blog = await Blog.findOne({ userId });
  } else {
    blog = blogs.find(b => b.userId === userId);
  }
  
  if (!blog) {
    ctx.reply('–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –±–ª–æ–≥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–≥–∞.');
    return;
  }
  
  let userPosts;
  if (useMongoDB) {
    userPosts = await Post.find({ blogId: blog._id }).sort({ createdAt: -1 });
  } else {
    userPosts = posts.filter(p => p.blogId === blog.id && (p.isPublished === undefined || p.isPublished !== false)).sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
  }
  
  if (userPosts.length === 0) {
    ctx.reply('–í –≤–∞—à–µ–º –±–ª–æ–≥–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç!');
    userStates.set(userId, { state: 'creating_post', blogId: blog.id || blog._id });
    return;
  }
  
  let message = 'üìù –í–∞—à–∏ –ø–æ—Å—Ç—ã:\n\n';
  userPosts.forEach((post, index) => {
    const date = new Date(post.createdAt).toLocaleDateString('ru-RU');
    message += `${index + 1}. ${post.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'} (${date})\n`;
  });
  
  message += '\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n';
  message += '/edit <–Ω–æ–º–µ—Ä> - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç\n';
  message += '/delete <–Ω–æ–º–µ—Ä> - –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç';
  
  ctx.reply(message);
  userStates.set(userId, { state: 'managing_posts', blogId: blog.id || blog._id, posts: userPosts });
});

// –ö–æ–º–∞–Ω–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞
bot.command('edit', async (ctx) => {
  const userId = ctx.from.id;
  const args = ctx.message.text.split(' ');
  
  if (args.length < 2) {
    ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /edit <–Ω–æ–º–µ—Ä_–ø–æ—Å—Ç–∞>');
    return;
  }
  
  const postNumber = parseInt(args[1]) - 1;
  const userState = userStates.get(userId);
  
  if (!userState || !userState.posts || !userState.posts[postNumber]) {
    ctx.reply('–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /posts –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤.');
    return;
  }
  
  const post = userState.posts[postNumber];
  userStates.set(userId, { 
    state: 'editing_post', 
    blogId: userState.blogId, 
    postId: post.id || post._id 
  });
  
  ctx.reply(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ "${post.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}". –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ:`);
});

// –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞
bot.command('delete', async (ctx) => {
  const userId = ctx.from.id;
  const args = ctx.message.text.split(' ');
  
  if (args.length < 2) {
    ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete <–Ω–æ–º–µ—Ä_–ø–æ—Å—Ç–∞>');
    return;
  }
  
  const postNumber = parseInt(args[1]) - 1;
  const userState = userStates.get(userId);
  
  if (!userState || !userState.posts || !userState.posts[postNumber]) {
    ctx.reply('–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /posts –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤.');
    return;
  }
  
  const post = userState.posts[postNumber];
  
  console.log(`–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞: userId=${userId}, postNumber=${postNumber}, postId=${post.id || post._id}`);
  
  try {
    if (useMongoDB) {
      await Post.findByIdAndDelete(post._id);
    } else {
      // –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      const postIndex = posts.findIndex(p => p.id === post.id);
      if (postIndex !== -1) {
        posts.splice(postIndex, 1);
        saveData(POSTS_FILE, posts);
      }
    }
    
    ctx.reply('–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤
    if (useMongoDB) {
      const updatedPosts = await Post.find({ blogId: userState.blogId }).sort({ createdAt: -1 });
      userStates.set(userId, { 
        state: 'managing_posts', 
        blogId: userState.blogId, 
        posts: updatedPosts 
      });
    } else {
      const updatedPosts = posts.filter(p => p.blogId === userState.blogId && (p.isPublished === undefined || p.isPublished !== false)).sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
      userStates.set(userId, { 
        state: 'managing_posts', 
        blogId: userState.blogId, 
        posts: updatedPosts 
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞:', error);
    ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–ª–æ–≥–∞
bot.command('deleteblog', async (ctx) => {
  const userId = ctx.from.id;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–ª–æ–≥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  let blog;
  if (useMongoDB) {
    blog = await Blog.findOne({ userId });
  } else {
    blog = blogs.find(b => b.userId === userId);
  }
  
  if (!blog) {
    ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –±–ª–æ–≥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–≥–∞.');
    return;
  }
  
  // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  const keyboard = {
    inline_keyboard: [
      [
        { text: '‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'deleteblog_cancel' },
        { text: '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –±–ª–æ–≥', callback_data: 'deleteblog_confirm' }
      ]
    ]
  };
  
  ctx.reply(
    `‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –±–ª–æ–≥ "${blog.name}"\n\n` +
    `–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:\n` +
    `‚Ä¢ –£–¥–∞–ª–∏—Ç –í–°–ï –ø–æ—Å—Ç—ã –≤ –±–ª–æ–≥–µ\n` +
    `‚Ä¢ –£–¥–∞–ª–∏—Ç —Å–∞–º –±–ª–æ–≥\n` +
    `‚Ä¢ –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û\n\n` +
    `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –±–ª–æ–≥?`,
    { reply_markup: keyboard }
  );
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–≥–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  userStates.set(userId, { 
    state: 'confirming_blog_deletion', 
    blogId: blog.id || blog._id,
    blogName: blog.name
  });
});

// –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
bot.command('help', (ctx) => {
  const helpMessage = `
üìö –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:

/create - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±–ª–æ–≥
/posts - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–º–∏
/edit <–Ω–æ–º–µ—Ä> - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç
/delete <–Ω–æ–º–µ—Ä> - –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç
/deleteblog - –£–¥–∞–ª–∏—Ç—å –±–ª–æ–≥
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üí° –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç!
  `;
  
  ctx.reply(helpMessage);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫
bot.action(/deleteblog_(confirm|cancel)/, async (ctx) => {
  const userId = ctx.from.id;
  const action = ctx.match[1]; // 'confirm' –∏–ª–∏ 'cancel'
  const userState = userStates.get(userId);
  
  if (!userState || userState.state !== 'confirming_blog_deletion') {
    ctx.answerCbQuery('–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ');
    return;
  }
  
  if (action === 'cancel') {
    // –û—Ç–º–µ–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
    userStates.delete(userId);
    ctx.editMessageText('‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –±–ª–æ–≥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
    ctx.answerCbQuery();
  } else if (action === 'confirm') {
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
    try {
      const { blogId, blogName } = userState;
      
      console.log(`–£–¥–∞–ª–µ–Ω–∏–µ –±–ª–æ–≥–∞: userId=${userId}, blogId=${blogId}, blogName=${blogName}`);
      
      if (useMongoDB) {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –±–ª–æ–≥–∞
        await Post.deleteMany({ blogId });
        // –£–¥–∞–ª—è–µ–º —Å–∞–º –±–ª–æ–≥
        await Blog.findByIdAndDelete(blogId);
      } else {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –±–ª–æ–≥–∞ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        const postsToKeep = posts.filter(p => p.blogId !== blogId);
        posts = postsToKeep;
        saveData(POSTS_FILE, posts);
        
        // –£–¥–∞–ª—è–µ–º –±–ª–æ–≥ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        const blogsToKeep = blogs.filter(b => b.id !== blogId);
        blogs = blogsToKeep;
        saveData(BLOGS_FILE, blogs);
      }
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      userStates.delete(userId);
      
      ctx.editMessageText(`üóëÔ∏è –ë–ª–æ–≥ "${blogName}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –≤–º–µ—Å—Ç–µ —Å–æ –≤—Å–µ–º–∏ –ø–æ—Å—Ç–∞–º–∏.\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±–ª–æ–≥ –∫–æ–º–∞–Ω–¥–æ–π /create`);
      ctx.answerCbQuery();
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–ª–æ–≥–∞:', error);
      ctx.editMessageText('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–ª–æ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      ctx.answerCbQuery();
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
bot.on(['text', 'photo'], async (ctx) => {
  const userId = ctx.from.id;
  const userState = userStates.get(userId);
  let messageText = '';
  let imageFileId = null;
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  if (ctx.message.text) {
    messageText = ctx.message.text;
  } else if (ctx.message.photo && ctx.message.photo.length > 0) {
    // –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const photo = ctx.message.photo[ctx.message.photo.length - 1];
    imageFileId = photo.file_id;
    messageText = ctx.message.caption || '';
  } else {
    // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ —Ç–µ–∫—Å—Ç–∞, –Ω–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    return;
  }
  
  if (!userState) {
    ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–≥–∞ –∏–ª–∏ /posts –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏.');
    return;
  }
  
  switch (userState.state) {
    case 'waiting_for_blog_name':
      try {
        const blogName = messageText.trim();
        const subdomain = blogName.toLowerCase().replace(/[^a-z0-9]/g, '');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–¥–æ–º–µ–Ω–∞
        let existingBlog;
        if (useMongoDB) {
          existingBlog = await Blog.findOne({ subdomain });
        } else {
          existingBlog = blogs.find(blog => blog.subdomain === subdomain);
        }
        
        if (existingBlog) {
          ctx.reply('–ë–ª–æ–≥ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:');
          return;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª–æ–≥–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        userStates.set(userId, { 
          state: 'waiting_for_blog_description', 
          blogName, 
          subdomain 
        });
        ctx.reply('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –±–ª–æ–≥–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):');
      } catch (error) {
        ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–ª–æ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
      break;
      
    case 'waiting_for_blog_description':
      try {
        const description = messageText.trim() === '-' ? '' : messageText.trim();
        const { blogName, subdomain } = userState;
        
        const blogData = {
          id: generateId(),
          userId,
          name: blogName,
          subdomain,
          description,
          url: `https://${subdomain}.yourdomain.com`,
          createdAt: new Date(),
          updatedAt: new Date()
        };
        
        if (useMongoDB) {
          const blog = new Blog(blogData);
          await blog.save();
          userStates.delete(userId);
          ctx.reply(`üéâ –ë–ª–æ–≥ "${blogName}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n–í–∞—à –±–ª–æ–≥ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ${blog.url}\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ—Å—Ç—ã!`);
          userStates.set(userId, { state: 'creating_post', blogId: blog._id });
        } else {
          blogs.push(blogData);
          saveData(BLOGS_FILE, blogs);
          userStates.delete(userId);
          ctx.reply(`üéâ –ë–ª–æ–≥ "${blogName}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n–í–∞—à –±–ª–æ–≥ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: ${blogData.url}\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ—Å—Ç—ã!`);
          userStates.set(userId, { state: 'creating_post', blogId: blogData.id });
        }
      } catch (error) {
        ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–ª–æ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
      break;
      
    case 'creating_post':
      try {
        console.log(`–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, blogId: ${userState.blogId}`);
        
        let blog;
        if (useMongoDB) {
          blog = await Blog.findById(userState.blogId);
        } else {
          blog = blogs.find(b => b.id === userState.blogId || b._id === userState.blogId);
        }
        
        if (!blog) {
          console.log(`–ë–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è blogId: ${userState.blogId}`);
          ctx.reply('–ë–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –±–ª–æ–≥–∞.');
          userStates.delete(userId);
          return;
        }
        
        console.log(`–ë–ª–æ–≥ –Ω–∞–π–¥–µ–Ω: ${blog.name}, —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞...`);
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ (–º–∞–∫—Å–∏–º—É–º 60 —Å–∏–º–≤–æ–ª–æ–≤)
        let title = '';
        if (messageText) {
          const firstParagraph = messageText.split('\n')[0].trim();
          title = firstParagraph.length > 60 ? firstParagraph.substring(0, 60) + '...' : firstParagraph;
        }
        
        const postData = {
          id: generateId(),
          blogId: userState.blogId,
          content: messageText,
          title: title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
          imageFileId: imageFileId,
          createdAt: new Date(),
          updatedAt: new Date(),
          isPublished: true
        };
        
        if (useMongoDB) {
          const post = new Post(postData);
          await post.save();
        } else {
          posts.push(postData);
          saveData(POSTS_FILE, posts);
        }
        
        const successMessage = imageFileId 
          ? '‚úÖ –ü–æ—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –≤–∞—à–µ–º –±–ª–æ–≥–µ!'
          : '‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –≤–∞—à–µ–º –±–ª–æ–≥–µ!';
        
        ctx.reply(successMessage);
      } catch (error) {
        ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
      break;
      
    case 'editing_post':
      try {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ (–º–∞–∫—Å–∏–º—É–º 60 —Å–∏–º–≤–æ–ª–æ–≤)
        let title = '';
        if (messageText) {
          const firstParagraph = messageText.split('\n')[0].trim();
          title = firstParagraph.length > 60 ? firstParagraph.substring(0, 60) + '...' : firstParagraph;
        }
        
        if (useMongoDB) {
          await Post.findByIdAndUpdate(userState.postId, {
            content: messageText,
            title: title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
            imageFileId: imageFileId,
            updatedAt: new Date()
          });
          
          userStates.set(userId, { 
            state: 'managing_posts', 
            blogId: userState.blogId,
            posts: await Post.find({ blogId: userState.blogId }).sort({ createdAt: -1 })
          });
        } else {
          const postIndex = posts.findIndex(p => p.id === userState.postId);
          if (postIndex !== -1) {
            posts[postIndex].content = messageText;
            posts[postIndex].title = title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
            posts[postIndex].imageFileId = imageFileId;
            posts[postIndex].updatedAt = new Date();
            saveData(POSTS_FILE, posts);
            
            const updatedPosts = posts.filter(p => p.blogId === userState.blogId).sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
            userStates.set(userId, { 
              state: 'managing_posts', 
              blogId: userState.blogId,
              posts: updatedPosts
            });
          }
        }
        
        const successMessage = imageFileId 
          ? '‚úÖ –ü–æ—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!'
          : '‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!';
        
        ctx.reply(successMessage);
      } catch (error) {
        ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
      break;
      
    case 'managing_posts':
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Å—Ç
      try {
        let blog;
        if (useMongoDB) {
          blog = await Blog.findById(userState.blogId);
        } else {
          blog = blogs.find(b => b.id === userState.blogId || b._id === userState.blogId);
        }
        
        if (!blog) {
          ctx.reply('–ë–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –±–ª–æ–≥–∞.');
          userStates.delete(userId);
          return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ (–º–∞–∫—Å–∏–º—É–º 60 —Å–∏–º–≤–æ–ª–æ–≤)
        let title = '';
        if (messageText) {
          const firstParagraph = messageText.split('\n')[0].trim();
          title = firstParagraph.length > 60 ? firstParagraph.substring(0, 60) + '...' : firstParagraph;
        }
        
        const postData = {
          id: generateId(),
          blogId: userState.blogId,
          content: messageText,
          title: title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
          imageFileId: imageFileId,
          createdAt: new Date(),
          updatedAt: new Date(),
          isPublished: true
        };
        
        if (useMongoDB) {
          const post = new Post(postData);
          await post.save();
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤
          const updatedPosts = await Post.find({ blogId: userState.blogId }).sort({ createdAt: -1 });
          userStates.set(userId, { 
            state: 'managing_posts', 
            blogId: userState.blogId, 
            posts: updatedPosts 
          });
        } else {
          posts.push(postData);
          saveData(POSTS_FILE, posts);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤
          const updatedPosts = posts.filter(p => p.blogId === userState.blogId).sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
          userStates.set(userId, { 
            state: 'managing_posts', 
            blogId: userState.blogId, 
            posts: updatedPosts 
          });
        }
        
        const successMessage = imageFileId 
          ? '‚úÖ –ü–æ—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –≤–∞—à–µ–º –±–ª–æ–≥–µ!'
          : '‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –≤–∞—à–µ–º –±–ª–æ–≥–µ!';
        
        ctx.reply(successMessage);
      } catch (error) {
        ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
      break;
  }
});

// –ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="ru">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>–°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –±–ª–æ–≥</title>
      <link rel="stylesheet" href="/css/style.css">
      <link rel="icon" href="/assets/teleblog.svg" type="image/svg+xml">
      <meta name="description" content="–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π –±–ª–æ–≥ –∑–∞ 2 –º–∏–Ω—É—Ç—ã —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞ Teleblog!">
    </head>
    <body>
      <main class="landing-main">
        <div class="landing-logo">
          <img src="/assets/teleblog.svg" alt="Teleblog logo" width="64" height="64"/>
        </div>
        <h1 class="landing-title">–°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–±<br>—Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –±–ª–æ–≥</h1>
        <div class="landing-steps">
          <div class="landing-step">
            <span class="landing-step-number">1</span>
            <span>–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –±–æ—Ç <a class="landing-step-link" href="https://t.me/teleblogsmart_bot" target="_blank">@teleblogsmart_bot</a></span>
          </div>
          <div class="landing-step">
            <span class="landing-step-number">2</span>
            <span>–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏–∑ 2-—Ö —à–∞–≥–æ–≤</span>
          </div>
          <div class="landing-step">
            <span class="landing-step-number">3</span>
            <span>–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤</span>
          </div>
        </div>
        <a class="landing-btn" href="https://t.me/teleblogsmart_bot" target="_blank">
          –°–æ–∑–¥–∞—Ç—å Teleblog
          <span class="landing-btn-icon">
            <img src="/assets/telegram-white.svg" alt="Telegram" width="24" height="24"/>
          </span>
        </a>
        <div class="landing-stats">
          <div>–í—Å–µ–≥–æ –±–ª–æ–≥–∞: ${blogs.length}</div>
          <div>–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: ${posts.length}</div>
        </div>
        <footer class="landing-footer">
          –≠—Ç–æ –≤–∞–π–±–∫–æ–¥-—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω <a href="https://t.me/cojocarumaxim" target="_blank" style="color:inherit;text-decoration:underline;">@cojocarumaxim</a> –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –≤–µ–¥–µ–Ω–∏—è –±–ª–æ–≥–∞
        </footer>
      </main>
    </body>
    </html>
  `);
});

// API –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
app.get('/api/blogs/:subdomain', async (req, res) => {
  try {
    let blog;
    let userPosts;
    
    if (useMongoDB) {
      blog = await Blog.findOne({ subdomain: req.params.subdomain });
      if (blog) {
        userPosts = await Post.find({ blogId: blog._id }).sort({ createdAt: -1 });
      }
    } else {
      blog = blogs.find(b => b.subdomain === req.params.subdomain);
      if (blog) {
        userPosts = posts.filter(p => p.blogId === blog.id).sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
      }
    }
    
    if (!blog) {
      return res.status(404).json({ error: '–ë–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    res.json({ blog, posts: userPosts });
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.get('/api/blogs/:subdomain/posts/:postId', async (req, res) => {
  try {
    let blog;
    let post;
    
    if (useMongoDB) {
      blog = await Blog.findOne({ subdomain: req.params.subdomain });
      if (blog) {
        post = await Post.findOne({ _id: req.params.postId, blogId: blog._id });
      }
    } else {
      blog = blogs.find(b => b.subdomain === req.params.subdomain);
      if (blog) {
        post = posts.find(p => p.id === req.params.postId && p.blogId === blog.id);
      }
    }
    
    if (!blog) {
      return res.status(404).json({ error: '–ë–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    if (!post) {
      return res.status(404).json({ error: '–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    res.json({ post });
  } catch (error) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// API –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –±–ª–æ–≥–∞
app.post('/api/blogs/:subdomain/view', async (req, res) => {
  try {
    let blog;
    if (useMongoDB) {
      blog = await Blog.findOne({ subdomain: req.params.subdomain });
      if (blog) {
        await Post.updateMany(
          { blogId: blog._id },
          { $inc: { viewCount: 1 } }
        );
      }
    } else {
      blog = blogs.find(b => b.subdomain === req.params.subdomain);
      if (blog) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –≤ —Ñ–∞–π–ª–æ–≤–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        posts.forEach(post => {
          if (post.blogId === blog.id) {
            post.viewCount = (post.viewCount || 0) + 1;
          }
        });
        saveData(POSTS_FILE, posts);
      }
    }
    
    if (!blog) {
      return res.status(404).json({ error: '–ë–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    res.json({ success: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// API –¥–ª—è –ª–∞–π–∫–æ–≤ –ø–æ—Å—Ç–æ–≤
app.post('/api/blogs/:subdomain/posts/:postId/like', async (req, res) => {
  try {
    let blog;
    let post;
    
    if (useMongoDB) {
      blog = await Blog.findOne({ subdomain: req.params.subdomain });
      if (blog) {
        post = await Post.findOne({ _id: req.params.postId, blogId: blog._id });
      }
    } else {
      blog = blogs.find(b => b.subdomain === req.params.subdomain);
      if (blog) {
        post = posts.find(p => p.id === req.params.postId && p.blogId === blog.id);
      }
    }
    
    if (!blog) {
      return res.status(404).json({ error: '–ë–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    if (!post) {
      return res.status(404).json({ error: '–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ª–∞–π–∫–æ–≤
    if (useMongoDB) {
      post.likes = (post.likes || 0) + 1;
      await post.save();
    } else {
      post.likes = (post.likes || 0) + 1;
      saveData(POSTS_FILE, posts);
    }
    
    res.json({ success: true, likes: post.likes });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–∞–π–∫–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
app.get('/:subdomain/post/:postId', async (req, res) => {
  try {
    let blog;
    let post;
    if (useMongoDB) {
      blog = await Blog.findOne({ subdomain: req.params.subdomain });
      if (blog) {
        post = await Post.findOne({ _id: req.params.postId, blogId: blog._id });
      }
    } else {
      blog = blogs.find(b => b.subdomain === req.params.subdomain);
      if (blog) {
        post = posts.find(p => p.id === req.params.postId && p.blogId === blog.id);
      }
    }
    if (!blog || !post) {
      return res.status(404).send('<h2>–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω</h2>');
    }
    // –§–æ—Ä–º–∏—Ä—É–µ–º imageUrl –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
    if (post.imageFileId) {
      post.imageUrl = await getImageUrl(post.imageFileId);
      console.log('imageFileId:', post.imageFileId, 'imageUrl:', post.imageUrl);
    }
    res.send(`
      <!DOCTYPE html>
      <html lang="ru">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${post.title} ‚Äî ${blog.name}</title>
        <meta name="description" content="${blog.description || ''}">
        <link rel="stylesheet" href="/css/style.css">
        <link rel="icon" href="/assets/teleblog.svg" type="image/svg+xml">
      </head>
      <body>
        <main class="blog-main">
          
          <header class="blog-header">
            <h1 class="blog-title">${blog.name}</h1>
            ${blog.description ? `<div class="blog-desc">${blog.description}</div>` : ''}
            <div class="blog-author">–ê–≤—Ç–æ—Ä <a href="https://t.me/cojocarumaxim" target="_blank">@cojocarumaxim</a></div>
          </header>
          <a class="blog-back-btn" href="/${blog.subdomain}">‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–ª–æ–≥</a>
          <article class="post">
            <h2 class="post-title">${post.title}</h2>
            ${post.imageUrl ? `<div class="post-image"><img src="${post.imageUrl}" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å—Ç–∞"></div>` : ''}
            <div class="post-content">${post.content.replace(/\n/g, '<br>')}</div>
            <div class="post-date">${new Date(post.createdAt).toLocaleDateString('ru-RU', { year: 'numeric', month: 'long', day: 'numeric' })}</div>
          </article>
        </main>
        <a class="blog-fab" href="/">
          <img src="/assets/teleblog.svg" alt="Teleblog logo" width="34" height="34"/>
        </a>
      </body>
      </html>
    `);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –±–ª–æ–≥–∞:', error);
    res.status(500).send('<h2>–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞</h2>');
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–ª–æ–≥–∞
app.get('/:subdomain', async (req, res) => {
  try {
    let blog;
    let userPosts;
    
    if (useMongoDB) {
      blog = await Blog.findOne({ subdomain: req.params.subdomain });
      if (blog) {
        userPosts = await Post.find({ blogId: blog._id, isPublished: true }).sort({ createdAt: -1 });
      }
    } else {
      blog = blogs.find(b => b.subdomain === req.params.subdomain);
      if (blog) {
        userPosts = posts.filter(p => p.blogId === blog.id && (p.isPublished === undefined || p.isPublished !== false)).sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
      }
    }
    
    // –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–æ—Å—Ç–æ–≤
    if (userPosts && userPosts.length > 0) {
      for (let post of userPosts) {
        if (post.imageFileId) {
          post.imageUrl = await getImageUrl(post.imageFileId);
        }
      }
    }
    
    if (!blog) {
      return res.status(404).send(`
        <!DOCTYPE html>
        <html lang="ru">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>–ë–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω</title>
          <link rel="stylesheet" href="/css/style.css">
        </head>
        <body>
          <div class="container">
            <div class="empty-state">
              <div class="empty-state-icon">üîç</div>
              <div class="empty-state-title">–ë–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω</div>
              <div class="empty-state-text">–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π –±–ª–æ–≥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±—ã–ª —É–¥–∞–ª–µ–Ω.</div>
            </div>
          </div>
        </body>
        </html>
      `);
    }
    
    res.send(`
      <!DOCTYPE html>
      <html lang="ru">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${blog.name}</title>
        <meta name="description" content="${blog.description || '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–ª–æ–≥'}">
        <link rel="stylesheet" href="/css/style.css">
        <link rel="icon" href="/assets/teleblog.svg" type="image/svg+xml">
      </head>
      <body>
        <main class="blog-main">
          <header class="blog-header">
            <h1 class="blog-title">${blog.name}</h1>
            ${blog.description ? `<div class="blog-desc">${blog.description}</div>` : ''}
            <div class="blog-author">–ê–≤—Ç–æ—Ä <a href="https://t.me/cojocarumaxim" target="_blank">@cojocarumaxim</a></div>
          </header>
          ${userPosts.length === 0 ? `
            <div class="post"><div class="post-content" style="color:#888">–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤</div></div>
          ` : userPosts.map(post => `
            <article class="post">
              <h2 class="post-title"><a href="/${blog.subdomain}/post/${post.id}" class="post-link">${post.title}</a></h2>
              ${post.imageUrl ? `<div class="post-image"><img src="${post.imageUrl}" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å—Ç–∞"></div>` : ''}
              <div class="post-content">${post.content.replace(/\n/g, '<br>')}</div>
              <div class="post-date">${new Date(post.createdAt).toLocaleDateString('ru-RU', { year: 'numeric', month: 'long', day: 'numeric' })}</div>
            </article>
          `).join('')}
        </main>
        <a class="blog-fab" href="/">
          <img src="/assets/teleblog.svg" alt="Teleblog logo" width="34" height="34"/>
        </a>
      </body>
      </html>
    `);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –±–ª–æ–≥–∞:', error);
    res.status(500).send('<h2>–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞</h2>');
  }
});
// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 3000;
bot.launch().then(() => {
  console.log('ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω');
});
app.listen(PORT, () => {
  console.log(`üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
// Graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));